Version control
git init = สร้าง Git repository จะได้ Director พร้อมระบบ ของ Git มาใน Director

git config --global = เพื่อให้รูว่าใครเป็นคนสร้าง Commit เเต่ละตัว Git ให้ผู้ใช้งานตั้งค่า Email เเละ Name ผ่านคำสั่ง
    -git config --global user.email    
    -git config --global user.Name

git add = เป็นคำสั่งที่เปลีั่ยนข้อมูลใน waiting Director ไปที่ Stating area

git status = คำสั่งนี้ใช้สำหรับตรวจสอบสถานะของไฟล์เเละข้อมูล ที่อยู่ใน Git

git commit = เป็นคำสั่งที่เปลี่ยนข้อมูลใน Staging area ไปที่ Git repository
    - git commit -m "message"

git log = เเสดง log ของ commit
    - git log 
    - git log all
    - git log --graph
    - git log --oneline
    - git log --oneline --graph
    - git log --oneline --graph --all


git diff = เช็ดการเปลี่ยนเเปลงของไฟล์ 
    Untrack files -> Empty diff 
    Modify files -> git diff <ตามด้วยชื่อไฟล์> (ถ้ายังไม่ git add เเล้ว)
    Staged file -> git diff --staged <ตามด้วยชื่อไฟล์> (ถ้า git add เเล้ว)

git stash = นำไฟล์ที่ไม่ได้อยุ่ใน Git repository ไปเก็บไว้ในที่เก็บชั่วคราว    
    Track file -> git stash (สำหรับไฟล์ที่ git add)
    Untracked files -> git stash --include --Untracked (สำหรับไฟล์ที่ยังไม่ git add)
    lgnone file -> git stash --all (Track ทุกไฟล์ รวมถึง git init)


    save staged เเบบกำหนดชื่อ -> git stash save "message"
    เเสดงรายการ staged -> git staged list
    ดึง stash กลับมา -> 
        git stash pop <ชื่อไฟล์ stash> (ลบ stash list ออก)
        git stash -p pop <ชื่อไฟล์ stash> (ดูเเบบละเอียด)
        git stash apply <ชื่อไฟล์ stash> (ไม่ลบ stash list ออก)
        git stash -p pop <ชื่อไฟล์ stash> (ดูเเบบละเอียด)
    clear list stash -> git stash clear    

git tag = เป็นเหมือน label ที่ใช้ชี้ไปที่ Commit ใดๆ ใน Git มักใช้กับการกำหนด Version
    list -> git tag
    Lightweight -> git tag "message" "commit code"    
    Annotation -> git tag --annotate "version" --message "message"

git show = ใช้สำหรับเเสดงรายละเอียด Commit ที่โดน tag
    - git show "version"    

git remove = ใช้สำหรับลบไฟล์ในระบบ
    - git rm <ตามด้วยชื่อไฟล์>  

git checkout = เป็นคำสั่งที่ถูกใช้บ่อยเนื่องจากสามารถใช้เปลี่่ยน Head เพื่อตรวจสอบ Reverion ได้เเบบไม่มีการเปลี่ยน History ของ Git 
    - git checkout "commit code"
    - git checkout "verion tag"

 git restore = ใช้สำหรับย้อนกลับข้อมูลใน git ส่วนที่ยังไม่ได้ Commit
    - git restore <filename> -> worktree
    - git restore --staged <filename> -> staged
    - git restore --source <Spacific HEAD or commit> <fileName>

 git reset = ใช้สำหรับยกเลิกข้อมูลในระบบที่อยู่ใน staging area เเล้ว (เคยมีการ Add เเล้ว)
    - git reset --mixed <File Name> = git restore --staged <filename>
    - git reset --soft <Commit code> -> Reset ไปยัง Head โดยไม่เเก้ Working Directory ด้วย   
    - git reset --hard <Commit code> -> Reset ไปยัง Head โดยเเก้ Working Directory ด้วย   

 git revert = ย้อนกลับการเเก้ไขใน git ด้วย Commit ใหม่

 git branching = เป้นเเนวคิดสำคัญอีกอย่างใน git ทำให้สามารถเเยกพัฒนาขนานกัน เเละรวมกันเมื่อถึงเวลาได้ง่าย   
    - git branch -> คำสั่งนี้ใช้สำหรับเเสดง local branch
    - git branch --all -> คำสั่งนี้ใช้สำหรับเเสดง local + remote branch บนเครื่อง
    - git branch <New branch> -> คำสั่งใช้สำหรับสำหรับสร้าง local branch ใหม่ เเต่จะยังไม่สลับไปใช้
    - git branch --delete <Branch> -> คำสั่งใช้ลบ Local Branch ที่ Marge ไปเเล้ว
    - git branch -D <Branch>
    
    **สำหรับ Remote branch**
    - git push origin --delete <Remote branch>
    - git push origin : <Remote branch>

git switch = ใช้สลับหรือสร้าง branch ใหม่
    - git switch <branch>
    - git switch -c <branch> -> เป็นการสร้าง branch เเล้วเรียกใช้งาน branch
    - git switch -C <branch>     

git marge = การรวม branch เข้าด้วยกัน
    - git merge <branch>
    - git merge --no-f <branch>
    - git merge --abort -> คือการยกเลิกการ merge ครั้งนั้นไป
  

git merge conflict = บางกรณีอาจจะเกิด conflict หาก Git ไม่สามารถทำการ Marge อัตโนมัติได้ จะต้องทำเเก้ไขด้วยตัวเอง เเล้วสั่ง
    - git merge --continue -> ทำให้ commit โดยไม่ต้องสร้างใหม่

git merge strategy = หากบางกรณีอาจจะเกิด conflict หาก Git ไม่สามารถทำการ marge อัตโนมัติได้ เเต่เราต้องการให้เลือกฝั่งใดฝั่งหนึ่งก่อนเสมอ
    - git merge --strategy recursive --strategy-option ours <branch> -> ตำเเหน่งที่เป็น branch ปัจจุบัน
    - git merge --strategy recursive --strategy-option theirs <branch> -> ตำเเหน่งที่ไม่ได้เป็น branch ปัจจุบัน

git rebase = คำสั่งนี้ใช้สำหรับปรับฐานของ Code ให้สอดคล้อง   
    - git rebase <branch main>
    - git rebase --continue -> ทำให้ commit โดยไม่ต้องสร้างใหม่     

git remote 
    - git remote -v = เเสดงการตั้งค่า Remote repository ทั้งหมด
    - git remote show <Remote> -> เเสดงรายละเอียด Remote repository
    - git remote add origin <URI> -> เพิ่ม Remote repository
    - git remote remove <Remote> -> ลบ Remote repository 

git push = เป็นการอัป โปรเจ็ตขึ้น Remote repository
    - git push origin <Branch/Ref> -> Push ข้อมูลใน Local ไปยัง Remote repository
    - git push origin --tag -> Push tag ใน Local ไปยัง Remote repository
    - git push origin --all -> Push Branch/tag ใน Local ไปยัง Remote repository

git clone
    - git clone [Remote url] -> ใช้ Copy Git repository
    - git clone --branch [Branch/Tag] [Remote url] -> ใช้ Copy Git repository เฉพาะ Branch/Tag
    - git clone --depth=1 [Remote URL] -> ใช้ Shallow Copy Git repository

git fetch = ใช้ Update ความเปลี่ยนเเปลงต่างๆ จาก Remote มาบนเครื่อง โดยไม่เปลี่ยนเเปลง Local repository ส่วนที่เราจะต้องทำงาน
    - git fetch [Remote]     

git pull = ใช้ Update ความเปลี่ยนเปลี่ยนเเปลงต่างๆ จาก Remote มาบนเครื่อง โดยเปลี่ยนเเปลง Local repository ส่วนที่เราจะต้องทำงาน
    - git pull [Remote] -> git fetch + git merge
    - git pull --rebase -> git fetch + git rebase **เเนะนำ**


git pull request = เป็น Feature ของ Github ที่ช่วยให้การ Review source code ก่อน merge มีประสิทธิภาพ
   - git push -u origin [branch รอง] 

git lgnone = เป็นไฟล์ที่ใช้ทำให้ Git รู้ว่าไม่ต้อง Track ไฟล์หรือ Director เหล่านั้น เช่นไฟล์ของระบบเองหรือไฟล์ Credential
   -git add .gitignore 

git hook = ใช้สำหรับคำสั่งในกรณีมี Event ต่างๆ เกิดขึ้นเพื่อช่วยให้นักพัฒนา เมื่อมี Event เกิดขึ้น  
   1. code .git/hooks/[ชื่อไฟล์ที่จะสร้าง] เพื่อ ใส่คำสั่งต่างๆ
   2. chmod +x .git/hooks/[ชื่อไฟล์ที่จะสร้าง] เพื่อ เปิดสิทธิ์ในการใช้งาน

git Cherry pick = ตำสั่งนี้ใช้เจาะจงเลือกสำหรับ Commit เช่น Security Fixed ที่ Branch อื่นเเต่อยากเอามาใช้ใน Branch
    - git cherry-pick [Commit code]
    - git cherry-pick --continue ทำให้ commit โดยไม่ต้องสร้างใหม่

git Force push = ใช้เพื่อเอา History บนเครื่อง Local ไปทับ History ที่ Remote มักใช้กรณีฉุกเฉิน เช่น เผลอ Push Sensitive Data ขึ้นไป   
    - git push -f origin main **เเนะนำ**
    - git push --force origin [branch name]
    **  History จะหายไป **

git squash = คำสั่งนี้้ทำให้เกิดการรวม Commit ย่อยๆ ให้เป็นตัวเดียวได้ เช่น เวลาเรา Commit ย่อยเกินไป ทำให้เข้าใจยากเลย อยากจะรวมเป็น Commit เดียว
    - git rebase -i HEAD~[จำนวน commit ย้อนหลัง]

git reflog = ปกติ Git จะมีการเก็บ Reference เมื่อมีการเปลี่ยนไว้ให้ ทำให้หากเราทำผิดพลาดข้อมูลก็จะยังไม่หายจากบนเครื่อง Local 
    - git reflog    

git blame = ใช้เเสดงคนเเก้ไขไฟล์เเบบ Line by Line
    - git blame [ชื่อไฟล์]

git bisect = เป็นการเเบ่ง Git Commit ออกทีละครั่งเพื่อหา Commit ที่เราสนใจ เช่น commit เเรกที่ทำให้เกิด Bug
    - git bisect start -> เปิดใช้งาน
    - git bisect bad [commit code] -> commit ที่คิดว่าบัค
    - git bisect good [commit code] -> commit ที่ไม่บัค      
    - git bisect reset -> รีเซ็ตเพื่อกลับไปค่าเริ่มต้น 

git flow = คุณสมบัติ
    - ทำงานขนานกันกันได้สะดวก
    - งานเป็นสัดส่วน
    - งานที่ต้องการ branch ยาวนาน
    - ไม่กระทบ branch หลัก
    - Force เเค่ของที่อย่ใน Branch หลักได้
    - เหมาะกับทีม Senior level น้อยๆ
    - การพัฒนาซับซ้อนขึ้น
    - มีจังหวะที่ให้ตรวจสอบ หรือ review code อย่างชัดเจน

git trunk = คุณสมบัติ
    - งานใน Branch หลักพร้อมสำหรับการ Reploy เสมอ
    - มักใช้คู่กับ Feature Flag ทำให้จัดกล่มทดสอบบน Production ได้สะดวกไม่ซับซ้อน
    - เหมาะกับทีมที่มี Senior เยอะ
    - เหมาะสำหรับช่วงขึ้นระบบใหม่
    - ลดความซับซ่อน
    - จังหวะที่ให้ตรวจสอบหรือ Review Code ต้องตกลงในทีม     


Command line
code <ชื่อไฟล์> = สร้างไฟล์
cls = clear log
del <ชื่อไฟล์> = ลบไฟล์
esc ออกจากระบบ
:wq! save แล้วออก 
:q! คือออก ไม่ save
dir = list file 
